



matrix_mul test cases

>>> matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul


case 1:

>>> matrix_mul("num", [[1,2,3]])
Traceback (most recent call last):
    ...
TypeError: m_a must be a list

case 2:

>>> matrix_mul([[1,2,3]], "num")
Traceback (most recent call last):
    ...
TypeError: m_b must be a list

case 3:

>>> matrix_mul([1,"num"], [[1,2], [1,2]])
Traceback (most recent call last):
    ...
TypeError: m_a must be a list of lists

case 4:

>>> matrix_mul([[1, 2]], [[1, 3], 4])
Traceback (most recent call last):
    ...
TypeError: m_b must be a list of lists

case 5:

>>> matrix_mul([], [[1,2], [1,2]])
Traceback (most recent call last):
    ...
ValueError: m_a can't be empty

case 6:

>>> matrix_mul([[]], [[1,2], [1,2]])
Traceback (most recent call last):
    ...
ValueError: m_a can't be empty

case 7:

>>> matrix_mul([[1,2], [1,2]], [])
Traceback (most recent call last):
    ...
ValueError: m_b can't be empty

case 8:

>>> matrix_mul([[1,2], [1,2]], [[]])
Traceback (most recent call last):
    ...
ValueError: m_b can't be empty

case 9:

>>> matrix_mul([[1,"num"]], [[1,2], [1,2]])
Traceback (most recent call last):
    ...
TypeError: m_a should contain only integers or floats

case 10:

>>> matrix_mul([[1,2], [1,2]], [[1,'f'], [1,2]])
Traceback (most recent call last):
    ...
TypeError: m_b should contain only integers or floats

case 11:

>>> matrix_mul([[1,2], [1, 2, 3]], [[1,2], [1,2]])
Traceback (most recent call last):
    ...
TypeError: each row of m_a must be of the same size

case 12:

>>> matrix_mul([[1,2], [1,2]], [[1,2], [1,2,3]])
Traceback (most recent call last):
    ...
TypeError: each row of m_b must be of the same size

case 13:

>>> matrix_mul([[1,2,3], [1,2,3]], [[1,2], [1,2]])
Traceback (most recent call last):
    ...
ValueError: m_a and m_b can't be multiplied